'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import { getDogsByUserId, Dog, getUserProfile, saveUserProfile, getDogProfile, saveDogProfile } from '@/lib/db'
import { AppBar } from '@/components/navigation/AppBar'
import { Card } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { Chip } from '@/components/ui/Chip'
import { motion } from 'framer-motion'

const userQuestions = {
  interests: {
    title: '–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã',
    options: ['–°–ø–æ—Ä—Ç', '–ü–æ—Ö–æ–¥—ã', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–ú—É–∑—ã–∫–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ß—Ç–µ–Ω–∏–µ', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–ô–æ–≥–∞'],
  },
  activity: {
    title: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    options: ['–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö', '–°–ø–æ–∫–æ–π–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏', '–ò–≥—Ä—ã –≤ –ø–∞—Ä–∫–µ', '–ü—Ä–æ–±–µ–∂–∫–∏', '–ü–æ—Ö–æ–¥—ã –≤ –≥–æ—Ä—ã', '–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö'],
  },
  personality: {
    title: '–í–∞—à–∞ –ª–∏—á–Ω–æ—Å—Ç—å',
    options: ['–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π', '–°–ø–æ–∫–æ–π–Ω—ã–π', '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '–í–µ—Å–µ–ª—ã–π'],
  },
  lookingFor: {
    title: '–ò—â–µ—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è',
    options: ['–°–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', '–ò–≥—Ä —Å —Å–æ–±–∞–∫–∞–º–∏', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', '–û–±—â–µ–Ω–∏—è', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'],
  },
}

const dogQuestions = {
  energyLevel: {
    title: '–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Å–æ–±–∞–∫–∏',
    description: '1 - –æ—á–µ–Ω—å —Å–ø–æ–∫–æ–π–Ω–∞—è, 5 - –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è',
    type: 'scale' as const,
    min: 1,
    max: 5,
  },
  sociability: {
    title: '–°–æ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ–±–∞–∫–∞–º–∏',
    description: '1 - –∏–∑–±–µ–≥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞, 5 - –æ–±–æ–∂–∞–µ—Ç –≤—Å–µ—Ö',
    type: 'scale' as const,
    min: 1,
    max: 5,
  },
  training: {
    title: '–£—Ä–æ–≤–µ–Ω—å –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∏',
    description: '1 - –Ω–µ –æ–±—É—á–µ–Ω–∞, 5 - –æ—Ç–ª–∏—á–Ω–æ –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–∞',
    type: 'scale' as const,
    min: 1,
    max: 5,
  },
  playStyle: {
    title: '–°—Ç–∏–ª—å –∏–≥—Ä—ã',
    options: ['–ë–µ–≥ –∏ –¥–æ–≥–æ–Ω—è–ª–∫–∏', '–ë–æ—Ä—å–±–∞', '–ê–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã', '–°–ø–æ–∫–æ–π–Ω—ã–µ –∏–≥—Ä—ã', '–ò–≥—Ä–∞ –≤ –≤–æ–¥–µ'],
  },
  favoriteActivities: {
    title: '–õ—é–±–∏–º—ã–µ –∑–∞–Ω—è—Ç–∏—è',
    options: ['–ü–ª–∞–≤–∞–Ω–∏–µ', '–ë–µ–≥', '–ö–æ–ø–∞–Ω–∏–µ', '–û–±–Ω—é—Ö–∏–≤–∞–Ω–∏–µ', '–ò–≥—Ä–∞ —Å –º—è—á–æ–º', '–û–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–æ–±–∞–∫–∞–º–∏', '–û—Ç–¥—ã—Ö'],
  },
}

export default function DatingTestPage() {
  const { user, isLoading } = useAuth()
  const router = useRouter()
  const [step, setStep] = useState<'user' | 'selectDog' | 'dog'>('user')
  const [dogs, setDogs] = useState<Dog[]>([])
  const [selectedDog, setSelectedDog] = useState<Dog | null>(null)
  
  // User answers
  const [userAnswers, setUserAnswers] = useState({
    interests: [] as string[],
    activity: [] as string[],
    personality: [] as string[],
    lookingFor: [] as string[],
  })

  // Dog answers
  const [dogAnswers, setDogAnswers] = useState({
    energyLevel: 3,
    sociability: 3,
    training: 3,
    playStyle: [] as string[],
    favoriteActivities: [] as string[],
  })

  useEffect(() => {
    if (!isLoading && !user) {
      router.push('/auth')
      return
    }

    if (user) {
      const userDogs = getDogsByUserId(user.id)
      setDogs(userDogs)

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
      const existingProfile = getUserProfile(user.id)
      if (existingProfile?.completedTest) {
        router.push('/dating')
      }
    }
  }, [user, isLoading, router])

  if (isLoading || !user) {
    return <div className="flex items-center justify-center min-h-screen">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  }

  if (dogs.length === 0 && step === 'selectDog') {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <Card className="p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold mb-4">–î–æ–±–∞–≤—å—Ç–µ –ø–∏—Ç–æ–º—Ü–∞</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–π—Ç–∏–Ω–≥–∞ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π —Å–æ–±–∞–∫–µ
          </p>
          <Button onClick={() => router.push('/account?tab=pets')}>
            –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
          </Button>
        </Card>
      </div>
    )
  }

  const handleUserSelect = (category: keyof typeof userAnswers, value: string) => {
    const current = userAnswers[category]
    if (current.includes(value)) {
      setUserAnswers({
        ...userAnswers,
        [category]: current.filter(v => v !== value),
      })
    } else {
      setUserAnswers({
        ...userAnswers,
        [category]: [...current, value],
      })
    }
  }

  const handleDogSelect = (category: 'playStyle' | 'favoriteActivities', value: string) => {
    const current = dogAnswers[category]
    if (current.includes(value)) {
      setDogAnswers({
        ...dogAnswers,
        [category]: current.filter(v => v !== value),
      })
    } else {
      setDogAnswers({
        ...dogAnswers,
        [category]: [...current, value],
      })
    }
  }

  const handleFinish = () => {
    if (!user || !selectedDog) return

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveUserProfile({
      userId: user.id,
      completedTest: true,
      ...userAnswers,
    })

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–±–∞–∫–∏
    saveDogProfile({
      dogId: selectedDog.id,
      completedTest: true,
      ...dogAnswers,
    })

    router.push('/dating')
  }

  const handleNextStep = () => {
    if (step === 'user') {
      setStep('selectDog')
    } else if (step === 'selectDog' && selectedDog) {
      setStep('dog')
    }
  }

  const canProceed = () => {
    if (step === 'user') {
      return Object.values(userAnswers).some(arr => arr.length > 0)
    }
    if (step === 'selectDog') {
      return selectedDog !== null
    }
    if (step === 'dog') {
      return dogAnswers.playStyle.length > 0 || dogAnswers.favoriteActivities.length > 0
    }
    return false
  }

  return (
    <div className="flex flex-col h-screen">
      <AppBar title="–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –¥–µ–π—Ç–∏–Ω–≥–∞" showBack />

      <div className="flex-1 overflow-y-auto custom-scrollbar bg-gray-50 dark:bg-gray-900 p-4">
        <div className="max-w-2xl mx-auto">
          {/* Progress */}
          <div className="mb-8">
            <div className="flex justify-between mb-2">
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                {step === 'user' && '–®–∞–≥ 1 –∏–∑ 3: –û –≤–∞—Å'}
                {step === 'selectDog' && '–®–∞–≥ 2 –∏–∑ 3: –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–∞–∫—É'}
                {step === 'dog' && '–®–∞–≥ 3 –∏–∑ 3: –û –≤–∞—à–µ–π —Å–æ–±–∞–∫–µ'}
              </span>
            </div>
            <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
              <motion.div
                className="h-full bg-blue-500"
                initial={{ width: '0%' }}
                animate={{ 
                  width: step === 'user' ? '33%' : step === 'selectDog' ? '66%' : '100%'
                }}
                transition={{ duration: 0.3 }}
              />
            </div>
          </div>

          {/* User Questions */}
          {step === 'user' && (
            <div className="space-y-6">
              {Object.entries(userQuestions).map(([key, question]) => (
                <Card key={key} className="p-6">
                  <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">
                    {question.title}
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    {question.options.map((option) => (
                      <Chip
                        key={option}
                        label={option}
                        selected={userAnswers[key as keyof typeof userAnswers].includes(option)}
                        onClick={() => handleUserSelect(key as keyof typeof userAnswers, option)}
                      />
                    ))}
                  </div>
                </Card>
              ))}
            </div>
          )}

          {/* Select Dog */}
          {step === 'selectDog' && (
            <Card className="p-6">
              <h3 className="text-lg font-bold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–∞–∫—É</h3>
              <div className="space-y-3">
                {dogs.map((dog) => (
                  <button
                    key={dog.id}
                    onClick={() => setSelectedDog(dog)}
                    className={`w-full p-4 rounded-lg border-2 transition-colors text-left ${
                      selectedDog?.id === dog.id
                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                        : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-12 rounded-full bg-gradient-to-br from-orange-400 to-pink-500 flex items-center justify-center text-2xl">
                        üêï
                      </div>
                      <div>
                        <p className="font-semibold text-gray-900 dark:text-white">{dog.name}</p>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {dog.breed}, {dog.age} {dog.age === 1 ? '–≥–æ–¥' : '–≥–æ–¥–∞'}
                        </p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </Card>
          )}

          {/* Dog Questions */}
          {step === 'dog' && selectedDog && (
            <div className="space-y-6">
              {Object.entries(dogQuestions).map(([key, question]) => (
                <Card key={key} className="p-6">
                  <h3 className="text-lg font-bold mb-2 text-gray-900 dark:text-white">
                    {question.title}
                  </h3>
                  {'description' in question && (
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                      {question.description}
                    </p>
                  )}

                  {'type' in question && question.type === 'scale' ? (
                    <div className="space-y-3">
                      <input
                        type="range"
                        min={question.min}
                        max={question.max}
                        value={dogAnswers[key as keyof typeof dogAnswers] as number}
                        onChange={(e) => setDogAnswers({
                          ...dogAnswers,
                          [key]: parseInt(e.target.value),
                        })}
                        className="w-full"
                      />
                      <div className="flex justify-between text-sm">
                        {Array.from({ length: question.max }, (_, i) => i + 1).map((num) => (
                          <span key={num} className={`
                            ${dogAnswers[key as keyof typeof dogAnswers] === num 
                              ? 'text-blue-600 font-bold' 
                              : 'text-gray-400'}
                          `}>
                            {num}
                          </span>
                        ))}
                      </div>
                    </div>
                  ) : 'options' in question ? (
                    <div className="flex flex-wrap gap-2">
                      {question.options.map((option) => (
                        <Chip
                          key={option}
                          label={option}
                          selected={dogAnswers[key as 'playStyle' | 'favoriteActivities'].includes(option)}
                          onClick={() => handleDogSelect(key as 'playStyle' | 'favoriteActivities', option)}
                        />
                      ))}
                    </div>
                  ) : null}
                </Card>
              ))}
            </div>
          )}

          {/* Actions */}
          <div className="mt-8 flex gap-4">
            {step !== 'user' && (
              <Button
                variant="secondary"
                onClick={() => {
                  if (step === 'dog') setStep('selectDog')
                  else if (step === 'selectDog') setStep('user')
                }}
              >
                –ù–∞–∑–∞–¥
              </Button>
            )}
            {step !== 'dog' ? (
              <Button
                onClick={handleNextStep}
                disabled={!canProceed()}
                fullWidth
              >
                –î–∞–ª–µ–µ
              </Button>
            ) : (
              <Button
                onClick={handleFinish}
                disabled={!canProceed()}
                fullWidth
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}


