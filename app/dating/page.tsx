'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { X, Heart, SlidersHorizontal, MapPin, Star } from 'lucide-react'
import { AppBar } from '@/components/navigation/AppBar'
import { Card } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { Chip } from '@/components/ui/Chip'
import { PawHeartIcon } from '@/components/icons/DogymorbisIcons'

interface DatingProfile {
  id: string
  name: string
  age: number
  location: string
  distance: number
  avatar: string
  dogName: string
  dogBreed: string
  dogAge: number
  dogAvatar: string
  dogPersonality: string[]
  interests: string[]
  bio: string
  matchScore: number
}

const mockProfiles: DatingProfile[] = [
  {
    id: '1',
    name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
    age: 28,
    location: '–ú–æ—Å–∫–≤–∞',
    distance: 1.2,
    avatar: 'üë©',
    dogName: '–ú–∞–∫—Å',
    dogBreed: '–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ä–µ—Ç—Ä–∏–≤–µ—Ä',
    dogAge: 4,
    dogAvatar: 'ü¶Æ',
    dogPersonality: ['–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π', '–£–º–Ω—ã–π'],
    interests: ['–ü—Ä–æ–±–µ–∂–∫–∏', '–ê–¥–∂–∏–ª–∏—Ç–∏', '–ü–æ—Ö–æ–¥—ã'],
    bio: '–õ—é–±–ª—é –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö —Å –ú–∞–∫—Å–æ–º. –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!',
    matchScore: 95,
  },
  {
    id: '2',
    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
    age: 32,
    location: '–ú–æ—Å–∫–≤–∞',
    distance: 2.5,
    avatar: 'üë®',
    dogName: '–õ—É–Ω–∞',
    dogBreed: '–•–∞—Å–∫–∏',
    dogAge: 2,
    dogAvatar: 'üê∫',
    dogPersonality: ['–ò–≥—Ä–∏–≤–∞—è', '–û–±—â–∏—Ç–µ–ª—å–Ω–∞—è', '–õ—é–±–æ–ø—ã—Ç–Ω–∞—è'],
    interests: ['–ü–∞—Ä–∫–∏', '–ò–≥—Ä—ã', '–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏'],
    bio: '–õ—É–Ω–∞ –æ–±–æ–∂–∞–µ—Ç –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏. –ì—É–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–∞—Ä–∫–µ –ì–æ—Ä—å–∫–æ–≥–æ',
    matchScore: 88,
  },
  {
    id: '3',
    name: '–î–∞—Ä—å—è',
    age: 25,
    location: '–ú–æ—Å–∫–≤–∞',
    distance: 3.8,
    avatar: 'üë©‚Äçü¶∞',
    dogName: '–†–æ–∫–∫–∏',
    dogBreed: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –±—É–ª—å–¥–æ–≥',
    dogAge: 3,
    dogAvatar: 'üêï',
    dogPersonality: ['–°–ø–æ–∫–æ–π–Ω—ã–π', '–õ–∞—Å–∫–æ–≤—ã–π'],
    interests: ['–ù–µ—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏', '–ö–∞—Ñ–µ —Å —Å–æ–±–∞–∫–∞–º–∏'],
    bio: '–†–æ–∫–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Å–ø–æ–∫–æ–π–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ–±–∞–∫–∞–º–∏',
    matchScore: 76,
  },
]

const tabs = ['–°–≤–∞–π–ø—ã', '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è', '–§–∏–ª—å—Ç—Ä—ã']

export default function DatingPage() {
  const [activeTab, setActiveTab] = useState('–°–≤–∞–π–ø—ã')
  const [profiles, setProfiles] = useState(mockProfiles)
  const [currentIndex, setCurrentIndex] = useState(0)
  const [matches, setMatches] = useState<DatingProfile[]>([])

  const currentProfile = profiles[currentIndex]

  const handleSwipe = (direction: 'left' | 'right') => {
    if (direction === 'right') {
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      if (Math.random() > 0.5) {
        setMatches([...matches, currentProfile])
      }
    }
    setCurrentIndex(currentIndex + 1)
  }

  if (activeTab === '–°–≤–∞–π–ø—ã' && currentProfile) {
    return (
      <div className="flex flex-col h-screen">
        <AppBar 
          title="–î–µ–π—Ç–∏–Ω–≥" 
          actions={
            <button 
              onClick={() => setActiveTab('–§–∏–ª—å—Ç—Ä—ã')}
              className="p-2 rounded-lg hover:bg-black/5 dark:hover:bg-white/5"
            >
              <SlidersHorizontal size={20} />
            </button>
          }
        />

        <div className="flex-1 flex items-center justify-center p-4 bg-background">
          <div className="w-full max-w-md">
            <AnimatePresence mode="wait">
              <motion.div
                key={currentProfile.id}
                initial={{ scale: 0.8, opacity: 0, rotateY: -90 }}
                animate={{ scale: 1, opacity: 1, rotateY: 0 }}
                exit={{ scale: 0.8, opacity: 0, rotateY: 90 }}
                transition={{ type: 'spring', stiffness: 260, damping: 20 }}
              >
                <Card className="overflow-hidden" elevation={3}>
                  {/* Main Image Placeholder */}
                  <div className="relative aspect-[3/4] bg-gradient-to-br from-sky/20 to-honey/20 flex items-center justify-center">
                    <div className="text-center">
                      <div className="text-8xl mb-4">{currentProfile.dogAvatar}</div>
                      <div className="text-4xl">{currentProfile.avatar}</div>
                    </div>
                    {/* Match Score */}
                    <div className="absolute top-4 right-4 bg-success text-white px-3 py-1 rounded-full elevation-2 flex items-center gap-1">
                      <Star size={14} fill="currentColor" />
                      <span className="text-caption font-bold">{currentProfile.matchScore}%</span>
                    </div>
                  </div>

                  {/* Profile Info */}
                  <div className="p-6">
                    <div className="flex items-start justify-between mb-3">
                      <div>
                        <h2 className="text-title font-bold text-text-primary-light dark:text-text-primary-dark">
                          {currentProfile.name}, {currentProfile.age}
                        </h2>
                        <h3 className="text-label font-semibold text-sky">
                          {currentProfile.dogName}, {currentProfile.dogAge} {currentProfile.dogAge === 1 ? '–≥–æ–¥' : '–≥–æ–¥–∞'}
                        </h3>
                        <p className="text-body text-text-secondary-light dark:text-text-secondary-dark">
                          {currentProfile.dogBreed}
                        </p>
                      </div>
                    </div>

                    <div className="flex items-center gap-2 mb-4 text-text-secondary-light dark:text-text-secondary-dark">
                      <MapPin size={16} />
                      <span className="text-body">{currentProfile.location} ‚Ä¢ {currentProfile.distance} –∫–º</span>
                    </div>

                    <p className="text-body text-text-primary-light dark:text-text-primary-dark mb-4">
                      {currentProfile.bio}
                    </p>

                    {/* Dog Personality */}
                    <div className="mb-4">
                      <p className="text-caption text-text-secondary-light dark:text-text-secondary-dark mb-2">
                        –•–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–±–∞–∫–∏
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {currentProfile.dogPersonality.map((trait) => (
                          <Chip key={trait} label={trait} />
                        ))}
                      </div>
                    </div>

                    {/* Interests */}
                    <div>
                      <p className="text-caption text-text-secondary-light dark:text-text-secondary-dark mb-2">
                        –ò–Ω—Ç–µ—Ä–µ—Å—ã
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {currentProfile.interests.map((interest) => (
                          <Chip key={interest} label={interest} selected />
                        ))}
                      </div>
                    </div>
                  </div>
                </Card>
              </motion.div>
            </AnimatePresence>

            {/* Action Buttons */}
            <div className="flex items-center justify-center gap-6 mt-6">
              <motion.button
                onClick={() => handleSwipe('left')}
                className="w-16 h-16 rounded-full bg-surface-light dark:bg-surface-dark elevation-2 flex items-center justify-center"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
              >
                <X size={32} className="text-danger" strokeWidth={2.5} />
              </motion.button>

              <motion.button
                onClick={() => handleSwipe('right')}
                className="w-20 h-20 rounded-full bg-gradient-to-br from-burgundy to-danger text-white elevation-3 flex items-center justify-center"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
              >
                <PawHeartIcon size={36} strokeWidth={2.5} />
              </motion.button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (activeTab === '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è') {
    return (
      <div className="flex flex-col h-screen">
        <AppBar 
          title="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è" 
          showBack
          actions={
            <button onClick={() => setActiveTab('–°–≤–∞–π–ø—ã')} className="text-sky text-body font-medium">
              –°–≤–∞–π–ø—ã
            </button>
          }
        />

        <div className="flex-1 overflow-y-auto custom-scrollbar bg-background p-4">
          {matches.length > 0 ? (
            <div className="grid grid-cols-2 gap-4">
              {matches.map((match) => (
                <Card key={match.id} className="p-4" elevation={2} interactive>
                  <div className="text-center">
                    <div className="relative inline-block mb-3">
                      <div className="w-16 h-16 rounded-full bg-surface2-light dark:bg-surface2-dark flex items-center justify-center text-3xl">
                        {match.avatar}
                      </div>
                      <div className="absolute -bottom-1 -right-1 w-8 h-8 rounded-full bg-honey border-2 border-white dark:border-surface-dark flex items-center justify-center text-lg">
                        {match.dogAvatar}
                      </div>
                    </div>
                    <h4 className="text-body font-bold text-text-primary-light dark:text-text-primary-dark mb-1">
                      {match.name} –∏ {match.dogName}
                    </h4>
                    <p className="text-caption text-text-secondary-light dark:text-text-secondary-dark mb-3">
                      {match.distance} –∫–º –æ—Ç –≤–∞—Å
                    </p>
                    <Button variant="primary" size="sm" fullWidth>
                      –ù–∞–ø–∏—Å–∞—Ç—å
                    </Button>
                  </div>
                </Card>
              ))}
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center h-full text-center">
              <PawHeartIcon size={64} className="text-text-secondary-light dark:text-text-secondary-dark mb-4" />
              <h3 className="text-title font-bold text-text-primary-light dark:text-text-primary-dark mb-2">
                –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
              </h3>
              <p className="text-body text-text-secondary-light dark:text-text-secondary-dark mb-4">
                –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–≤–∞–π–ø–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫
              </p>
              <Button variant="primary" onClick={() => setActiveTab('–°–≤–∞–π–ø—ã')}>
                –ö —Å–≤–∞–π–ø–∞–º
              </Button>
            </div>
          )}
        </div>
      </div>
    )
  }

  if (activeTab === '–§–∏–ª—å—Ç—Ä—ã') {
    return (
      <div className="flex flex-col h-screen">
        <AppBar title="–§–∏–ª—å—Ç—Ä—ã" showBack />

        <div className="flex-1 overflow-y-auto custom-scrollbar bg-background p-4 space-y-4">
          <Card className="p-4" elevation={1}>
            <h3 className="text-label font-semibold text-text-primary-light dark:text-text-primary-dark mb-3">
              –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            </h3>
            <input 
              type="range" 
              min="1" 
              max="50" 
              defaultValue="10"
              className="w-full"
            />
            <p className="text-caption text-text-secondary-light dark:text-text-secondary-dark mt-2 text-center">
              –î–æ 10 –∫–º
            </p>
          </Card>

          <Card className="p-4" elevation={1}>
            <h3 className="text-label font-semibold text-text-primary-light dark:text-text-primary-dark mb-3">
              –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏
            </h3>
            <div className="flex flex-wrap gap-2">
              {['–õ—é–±–∞—è', '–û–≤—á–∞—Ä–∫–∞', '–†–µ—Ç—Ä–∏–≤–µ—Ä', '–•–∞—Å–∫–∏', '–ë—É–ª—å–¥–æ–≥'].map(breed => (
                <Chip key={breed} label={breed} selected={breed === '–õ—é–±–∞—è'} />
              ))}
            </div>
          </Card>

          <Card className="p-4" elevation={1}>
            <h3 className="text-label font-semibold text-text-primary-light dark:text-text-primary-dark mb-3">
              –•–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–±–∞–∫–∏
            </h3>
            <div className="flex flex-wrap gap-2">
              {['–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π', '–°–ø–æ–∫–æ–π–Ω—ã–π', '–ò–≥—Ä–∏–≤—ã–π', '–£–º–Ω—ã–π'].map(trait => (
                <Chip key={trait} label={trait} />
              ))}
            </div>
          </Card>

          <Button variant="primary" fullWidth size="lg">
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
          </Button>
        </div>
      </div>
    )
  }

  return null
}


