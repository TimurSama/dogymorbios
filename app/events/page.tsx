'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { Plus, Calendar, MapPin, Users, Clock, DollarSign, Filter } from 'lucide-react'
import { AppBar } from '@/components/navigation/AppBar'
import { Card } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { Chip } from '@/components/ui/Chip'
import { formatDate, formatCurrency } from '@/lib/utils'

interface Event {
  id: string
  title: string
  description: string
  icon: string
  date: Date
  location: string
  organizer: string
  participants: number
  maxParticipants?: number
  price: number
  currency: 'BoneCoin' | 'RUB' | 'free'
  category: 'meetup' | 'training' | 'competition' | 'charity' | 'webinar'
  tags: string[]
}

const mockEvents: Event[] = [
  {
    id: '1',
    title: '–í—Å—Ç—Ä–µ—á–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ö–∞—Å–∫–∏',
    description: '–°–æ–≤–º–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –≤ –ü–∞—Ä–∫–µ –ì–æ—Ä—å–∫–æ–≥–æ. –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ö–∞—Å–∫–∏ –Ω–∞ –¥—Ä—É–∂–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É!',
    icon: 'üê∫',
    date: new Date(Date.now() + 86400000 * 2),
    location: '–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, –≥–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥',
    organizer: '–ö–ª—É–± "–•–∞—Å–∫–∏ –ú–æ—Å–∫–≤–∞"',
    participants: 24,
    maxParticipants: 50,
    price: 0,
    currency: 'free',
    category: 'meetup',
    tags: ['–•–∞—Å–∫–∏', '–ü—Ä–æ–≥—É–ª–∫–∞', '–ú–æ—Å–∫–≤–∞'],
  },
  {
    id: '2',
    title: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∞–¥–∂–∏–ª–∏—Ç–∏',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –Ω–∞—É—á–∏—Ç –±–∞–∑–æ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∞–¥–∂–∏–ª–∏—Ç–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–±–∞–∫ –ª—é–±—ã—Ö –ø–æ—Ä–æ–¥',
    icon: 'üèÉ',
    date: new Date(Date.now() + 86400000 * 5),
    location: '–°–ø–æ—Ä—Ç-–∫–ª—É–± "–ß–µ—Ç—ã—Ä–µ –ª–∞–ø—ã"',
    organizer: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
    participants: 12,
    maxParticipants: 15,
    price: 50,
    currency: 'BoneCoin',
    category: 'training',
    tags: ['–ê–¥–∂–∏–ª–∏—Ç–∏', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–°–ø–æ—Ä—Ç'],
  },
  {
    id: '3',
    title: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–±–µ–≥ —Å —Å–æ–±–∞–∫–∞–º–∏',
    description: '–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–π–¥—É—Ç –Ω–∞ –ø–æ–º–æ—â—å –ø—Ä–∏—é—Ç–∞–º –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ó–∞–±–µ–≥ –Ω–∞ 5 –∫–º',
    icon: '‚ù§Ô∏è',
    date: new Date(Date.now() + 86400000 * 10),
    location: '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏',
    organizer: '–§–æ–Ω–¥ "–í–µ—Ä–Ω—ã–µ –¥—Ä—É–∑—å—è"',
    participants: 156,
    price: 500,
    currency: 'RUB',
    category: 'charity',
    tags: ['–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ó–∞–±–µ–≥', '–ü—Ä–∏—é—Ç'],
  },
  {
    id: '4',
    title: '–û–Ω–ª–∞–π–Ω-–ª–µ–∫—Ü–∏—è: –ü–∏—Ç–∞–Ω–∏–µ —Å–æ–±–∞–∫',
    description: '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –≤—Ä–∞—á —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–∞—Ü–∏–æ–Ω–µ',
    icon: 'üéì',
    date: new Date(Date.now() + 86400000 * 3),
    location: '–û–Ω–ª–∞–π–Ω',
    organizer: '–í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞ "–ê–π–±–æ–ª–∏—Ç"',
    participants: 89,
    price: 0,
    currency: 'free',
    category: 'webinar',
    tags: ['–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏—è', '–ü–∏—Ç–∞–Ω–∏–µ', '–û–Ω–ª–∞–π–Ω'],
  },
]

const categories = [
  { id: 'all', label: '–í—Å–µ', icon: <Calendar size={14} /> },
  { id: 'meetup', label: '–í—Å—Ç—Ä–µ—á–∏', icon: 'üë•' },
  { id: 'training', label: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', icon: 'üèÉ' },
  { id: 'competition', label: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', icon: 'üèÜ' },
  { id: 'charity', label: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', icon: '‚ù§Ô∏è' },
  { id: 'webinar', label: '–í–µ–±–∏–Ω–∞—Ä—ã', icon: 'üéì' },
]

const tabs = ['–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ', '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', '–ü—Ä–æ—à–µ–¥—à–∏–µ']

export default function EventsPage() {
  const [activeTab, setActiveTab] = useState('–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ')
  const [selectedCategory, setSelectedCategory] = useState('all')

  const filteredEvents = selectedCategory === 'all'
    ? mockEvents
    : mockEvents.filter(event => event.category === selectedCategory)

  const getCurrencyLabel = (price: number, currency: string) => {
    if (currency === 'free') return '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
    return formatCurrency(price, currency)
  }

  return (
    <div className="flex flex-col h-screen">
      <AppBar 
        title="–°–æ–±—ã—Ç–∏—è" 
        actions={
          <>
            <button className="p-2 rounded-lg hover:bg-black/5 dark:hover:bg-white/5">
              <Filter size={20} />
            </button>
            <Button variant="ghost" className="!p-2">
              <Plus size={20} />
            </Button>
          </>
        }
      />

      {/* Tabs */}
      <div className="flex border-b border-line-light dark:border-line-dark bg-surface-light dark:bg-surface-dark">
        {tabs.map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`flex-1 px-4 py-3 text-body font-medium transition-colors relative ${
              activeTab === tab
                ? 'text-sky'
                : 'text-text-secondary-light dark:text-text-secondary-dark'
            }`}
          >
            {tab}
            {activeTab === tab && (
              <motion.div
                layoutId="activeTabEvents"
                className="absolute bottom-0 left-0 right-0 h-0.5 bg-sky"
                transition={{ type: 'spring', stiffness: 380, damping: 30 }}
              />
            )}
          </button>
        ))}
      </div>

      <div className="flex-1 overflow-y-auto custom-scrollbar bg-background">
        <div className="max-w-4xl mx-auto p-4 space-y-4">
          {/* Category Filters */}
          <div className="flex gap-2 overflow-x-auto pb-2 custom-scrollbar">
            {categories.map((cat) => (
              <Chip
                key={cat.id}
                label={cat.label}
                icon={typeof cat.icon === 'string' ? cat.icon : cat.icon}
                selected={selectedCategory === cat.id}
                onClick={() => setSelectedCategory(cat.id)}
              />
            ))}
          </div>

          {/* Events List */}
          <div className="space-y-4">
            {filteredEvents.map((event, index) => (
              <motion.div
                key={event.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.05 }}
              >
                <Card className="overflow-hidden" elevation={2} interactive>
                  <div className="flex flex-col md:flex-row">
                    {/* Icon/Date Section */}
                    <div className="md:w-32 bg-gradient-to-br from-sky/20 to-honey/20 p-6 flex flex-col items-center justify-center text-center">
                      <div className="text-5xl mb-2">{event.icon}</div>
                      <div className="text-caption text-text-primary-light dark:text-text-primary-dark font-semibold">
                        {event.date.getDate()}
                      </div>
                      <div className="text-caption text-text-secondary-light dark:text-text-secondary-dark">
                        {event.date.toLocaleDateString('ru-RU', { month: 'short' })}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 p-4">
                      <div className="flex items-start justify-between mb-2">
                        <h3 className="text-label font-bold text-text-primary-light dark:text-text-primary-dark">
                          {event.title}
                        </h3>
                        <Chip 
                          label={getCurrencyLabel(event.price, event.currency)}
                          className={event.currency === 'free' ? 'bg-success/20 border-success text-success' : ''}
                        />
                      </div>

                      <p className="text-body text-text-secondary-light dark:text-text-secondary-dark mb-3">
                        {event.description}
                      </p>

                      <div className="space-y-2 mb-3">
                        <div className="flex items-center gap-2 text-caption text-text-secondary-light dark:text-text-secondary-dark">
                          <Clock size={14} />
                          <span>{formatDate(event.date)} –≤ {event.date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</span>
                        </div>
                        <div className="flex items-center gap-2 text-caption text-text-secondary-light dark:text-text-secondary-dark">
                          <MapPin size={14} />
                          <span>{event.location}</span>
                        </div>
                        <div className="flex items-center gap-2 text-caption text-text-secondary-light dark:text-text-secondary-dark">
                          <Users size={14} />
                          <span>
                            {event.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            {event.maxParticipants && ` / ${event.maxParticipants}`}
                          </span>
                        </div>
                      </div>

                      <div className="flex flex-wrap gap-2 mb-4">
                        {event.tags.map((tag) => (
                          <Chip key={tag} label={tag} />
                        ))}
                      </div>

                      <div className="flex items-center gap-3">
                        <Button variant="primary" size="sm">
                          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        </Button>
                        <Button variant="secondary" size="sm">
                          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </Button>
                      </div>
                    </div>
                  </div>
                </Card>
              </motion.div>
            ))}
          </div>

          {/* Create Event CTA */}
          {activeTab === '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è' && (
            <Card className="p-6 text-center border-2 border-dashed border-line-light dark:border-line-dark" elevation={0}>
              <Calendar size={48} className="mx-auto mb-3 text-text-secondary-light dark:text-text-secondary-dark" />
              <h3 className="text-label font-bold text-text-primary-light dark:text-text-primary-dark mb-2">
                –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ
              </h3>
              <p className="text-body text-text-secondary-light dark:text-text-secondary-dark mb-4">
                –°–æ–∑–¥–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
              </p>
              <Button variant="primary">
                –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
              </Button>
            </Card>
          )}
        </div>
      </div>

      {/* FAB */}
      <motion.button
        className="fixed bottom-20 right-6 md:bottom-6 w-14 h-14 rounded-full bg-success text-white elevation-3 flex items-center justify-center z-40"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
      >
        <Plus size={24} />
      </motion.button>
    </div>
  )
}


